.data
.text
	add $a0, $zero, $zero
	addi $a1, $zero, 1
	jal insertar_inicio
	move $s0,$v0
	li $v0, 1
	lw $a0, 0($s0)
	syscall 
	add $a0, $zero, $s0
	addi $a1, $zero, 2
	jal insertar_inicio
	move $s0,$v0
	add $a0, $zero, $s0
	addi $a1, $zero, 5
	jal insertar_inicio
	move $s0,$v0
	add $a0, $zero, $s0
	addi $a1, $zero, 7
	jal insertar_inicio
	move $s0,$v0
	move $a0,$s0
	jal mostrar_lista
	
	
	li $v0,10
	syscall
	
	#Este procedidmiento se encarga de crear un nuevo nodo con un dato
	#Entrada: $a0-> dato entero para el nodo
	#Salida: $v0-> Direccion de memoria del nodo
	crear_nodo:
		addi $sp, $sp, -4
		sw $a0, 0($sp)
		addi $v0,$zero,9
		addi $a0,$zero,8
		syscall
		lw $a0, 0($sp)
		sw $a0, 0($v0) #Nodo->dato = dato_argumento
		sw $zero, 4($v0)#Nodo->sig = null o 0 o zero
		addi $sp,$sp,4
		jr $ra
	
		
	#Este procedimiento se encarga de reconocer si una lista estÃ¡ vacia
	#Entrada: $a0-> direccion de memoria de la lista
	#Salida: $v0-> un valor 1 o 0. 1 si esta vacia 0 si no esta vacia
	es_vacia:
		beq $a0, $zero, lista_vacia
		addi $v0,$zero, 0
		jr $ra
		lista_vacia:
			addi $v0, $zero, 1
			jr $ra
		
	#Este procedimiento se encarga de insertar un elemento al INICIO de una lista
	#Entrada: 	$a0-> direccion de memoria de la lista
	#	  	$a1 -> dato a guardar
	#Salida: 	$v0-> nueva direccion de memoria de la lista
	insertar_inicio:
		addi $sp, $sp, -12
		sw $ra, 0($sp)
		sw $a0, 4($sp)
		sw $a1, 8($sp)
		jal es_vacia
		beq $v0, 1, lista_vacia_insertar_inicio
		##lista NO vacia
			add $a0, $zero, $a1
			jal crear_nodo
			
			lw $a0, 4($sp) # $a0 -> puntero primer nodo
			sw $a0, 4($v0) #nuevo->sig = puntero primer nodo			
			b end_insertar_inicio
		
		lista_vacia_insertar_inicio:
		##lista vacia
			add $a0, $zero, $a1
			jal crear_nodo
			b end_insertar_inicio
		end_insertar_inicio:
			lw $k0, 0($sp)
			addi $sp, $sp,12
			jr $k0
	
	#Este procedimiento se encarga de mostrar por panatalla la lista enlazada
	#Entrada:	$a0->direccion de memoria de lista
	#Salida:	Sin salida
	mostrar_lista:
		addi $sp,$sp,-4
		sw $a0, 0($sp)
		move $t2, $a0
		loop_mostrar_lista:
			li $v0,1
			lw $a0,0($t2)
			syscall
			li $v0,4
			la $a0,salto_linea
			syscall
			lw $t0, 4($t2)
			beq $t0,$zero,end_mostrar_lista
			lw $t2, 4($t2)
			b loop_mostrar_lista
		end_mostrar_lista:
			lw $a0, 0($sp)
			addi $sp, $sp, 4
			jr $ra
	
		
